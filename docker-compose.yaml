version: "3"
services:
  order-service:
    image: "rishijatania/order-service"
    networks:
      - my-network
    env_file:
      - ./order-service/.env
    ports:
      - "8080:8080"
    depends_on:
      - database
    # entrypoint: "/debug-entrypoint.sh"
    healthcheck:
      test: curl --fail -s GET http://localhost:8080/apiHealthCheck || exit 1
      interval: 30s
      timeout: 5s
      retries: 10

  database:
    image: "postgres:13" # use official postgres version 13
    networks:
      - my-network
    env_file:
      - ./order-service/.env # configure postgres
    volumes:
      - postgres-data:/var/lib/postgresql/data/ # persist data even if container shuts downvolumes:
    ports:
      - "5432:5432"
    healthcheck:
      test: "/usr/bin/psql --user=unique_user --password=strong_password --dbname=ecom_order_service --execute \"\\d;\""
      interval: 20s
      timeout: 5s
      retries: 10

  kafka:
    image: wurstmeister/kafka:2.12-2.1.0
    restart: always
    mem_limit: 350m
    networks:
      - my-network
    ports:
      - "9092:9092"
    env_file:
      - ./order-service/.env
    depends_on:
      - zookeeper

  zookeeper:
    image: wurstmeister/zookeeper:3.4.6
    restart: always
    mem_limit: 350m
    networks:
      - my-network
    ports:
      - "2181:2181"
    environment:
      KAFKA_ADVERTISED_HOST_NAME: zookeeper

  kafdrop:
    image: obsidiandynamics/kafdrop
    restart: always
    networks:
      - my-network
    ports:
      - "9000:9000"
    environment:
      KAFKA_BROKERCONNECT: "kafka:9092"
    depends_on:
      - kafka

  grafana:
    image: grafana/grafana:5.4.3
    ports:
      - 3000:3000
    volumes:
      - ./grafana/datasources.yml:/etc/grafana/provisioning/datasources/datasources.yml
      - ./grafana/dashboards.yml:/etc/grafana/provisioning/dashboards/dashboards.yml
      - ./grafana/dashboards:/etc/grafana/provisioning/dashboards/dashboards
      - grafana-data:/var/lib/grafana # persist data even if container shuts downvolumes:
    env_file:
      - ./order-service/.env
    networks:
      my-network:
        aliases:
          - grafana

  prometheus:
    image: prom/prometheus:v2.21.0
    ports:
      - 9090:9090
    volumes:
      - ./prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus-data:/prometheus
    networks:
      my-network:
        aliases:  
          - prometheus

volumes:
  postgres-data: # named volumes can be managed easier using docker-compose
    driver: local
  grafana-data: # named volumes can be managed easier using docker-compose
    driver: local
  prometheus-data: # named volumes can be managed easier using docker-compose
    driver: local

networks:
  my-network:
    name: my-network
