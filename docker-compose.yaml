version: "3"
services:
  order-service:
    image: "rishijatania/order-service"
    networks:
      - my-network
    environment:
      - PGSQL_HOST=database
      - PGSQL_DB_NAME=ecom_order_service
      - PGSQL_USER=unique_user
      - PGSQL_PASSWORD=strong_password
      - NODE_ID=2
      - KAFKA_ADVERTISED_HOST_NAME=kafka
      - KAFKA_ADVERTISED_PORT=9092
      - KAFKA_LISTENER_GROUP_ID=orders-group
      - KAFKA_AUTO_OFFSET_RESET=earliest
      - KAFKA_ENABLE_AUTO_COMMIT=true
      - KAFKA_ORDER_SERVICE_CREATE_TOPIC=create-orders
      - KAFKA_ORDER_SERVICE_CANCEL_TOPIC=cancel-orders
      - KAFKA_MAX_POLL_RECORDS=1
      - KAFKA_TIME_INTERVAL_SLEEP=4000
      - SERVICE_PAYMENT_API_URL=https://api.stripe.com/v1/charges
      - SERVICE_INVENTORY_CHECK_API_URL=https://my-json-server.typicode.com/rishijatania/Ecom-App/items?itemName={itemName}
    ports:
      - "8080:8080"
    depends_on:
      - database
    healthcheck:
      test: curl --fail -s GET http://localhost:8080/apiHealthCheck || exit 1
      interval: 30s
      timeout: 5s
      retries: 10

  database:
    image: "postgres:13" # use official postgres version 13
    networks:
      - my-network
    env_file:
      - ./order-service/.env # configure postgres
    volumes:
      - postgres-data:/var/lib/postgresql/data/ # persist data even if container shuts downvolumes:
    ports:
      - "5432:5432"
    healthcheck:
      test: "/usr/bin/psql --user=unique_user --password=strong_password --dbname=ecom_order_service --execute \"\\d;\""
      interval: 20s
      timeout: 5s
      retries: 10

  kafka:
    image: wurstmeister/kafka:2.12-2.1.0
    restart: always
    mem_limit: 350m
    networks:
      - my-network
    ports:
      - "9092:9092"
    environment:
      KAFKA_ADVERTISED_HOST_NAME: kafka
      KAFKA_ADVERTISED_PORT: 9092
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: "false"
    depends_on:
      - zookeeper

  zookeeper:
    image: wurstmeister/zookeeper:3.4.6
    restart: always
    mem_limit: 350m
    networks:
      - my-network
    ports:
      - "2181:2181"
    environment:
      KAFKA_ADVERTISED_HOST_NAME: zookeeper

  kafdrop:
    image: obsidiandynamics/kafdrop
    restart: always
    networks:
      - my-network
    ports:
      - "9000:9000"
    environment:
      KAFKA_BROKERCONNECT: "kafka:9092"
    depends_on:
      - kafka

volumes:
  postgres-data: # named volumes can be managed easier using docker-compose
    driver: local

networks:
  my-network:
    name: my-network
