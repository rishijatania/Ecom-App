spring.application.name=order-service
# server.port=${port:8082}

## default connection pool
spring.datasource.hikari.connectionTimeout=30000
# spring.datasource.hikari.maximumPoolSize=5

## PostgreSQL
spring.datasource.url=jdbc:postgresql://${PGSQL_HOST}:5432/${PGSQL_DB_NAME}
spring.datasource.username=${PGSQL_USER}
spring.datasource.password=${PGSQL_PASSWORD}
spring.jpa.show-sql=true

# Hibernate Properties
# The SQL dialect makes Hibernate generate better SQL for the chosen database
spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.PostgreSQL92Dialect

#drop n create table again, good for testing, comment this in production
spring.jpa.hibernate.ddl-auto=create
hibernate.jdbc.time_zone=UTC

# LOGGING
logging.level.org.springframework.web=${LOGGING_LEVEL}
logging.level.org.hibernate=${LOGGING_LEVEL}
logging.level.com.ecom.orderservice=${LOGGING_LEVEL}

#Node ID for GUid generation
spring.nodeID=${NODE_ID}

kafka.bootstrapAddress=${KAFKA_ADVERTISED_HOST_NAME}:${KAFKA_ADVERTISED_PORT}
kafka.groupId=${KAFKA_LISTENER_GROUP_ID}
kafka.auto.offset.reset=${KAFKA_AUTO_OFFSET_RESET}
kafka.enable.auto.commit=${KAFKA_ENABLE_AUTO_COMMIT}
kafka.orderservice.create.topic=${KAFKA_ORDER_SERVICE_CREATE_TOPIC}
kafka.orderservice.cancel.topic=${KAFKA_ORDER_SERVICE_CANCEL_TOPIC}
kafka.max.poll.records=${KAFKA_MAX_POLL_RECORDS}
kafka.timeinterval.sleep=${KAFKA_TIME_INTERVAL_SLEEP}


service.payment.api.url=${SERVICE_PAYMENT_API_URL}
service.inventory.api.inventoryCheck=${SERVICE_INVENTORY_CHECK_API_URL}